{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","_templateObject","Button","button","_templateObject2","Paragraph","p","_templateObject3","Span","span","_templateObject4","App","state","isLoading","randomQuotes","handleClick","fetch","then","response","json","data","console","log","_this","setState","_this2","this","_this$state$randomQuo","quote","character","react_default","a","createElement","Fragment","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"o5CAIA,IAAMA,EAAeC,IAAOC,IAAVC,KAaZC,EAASH,IAAOI,OAAVC,KAmBNC,EAAYN,IAAOO,EAAVC,KAoBTC,EAAOT,IAAOU,KAAVC,KAoDKC,6MA9CbC,MAAQ,CACNC,WAAW,EACXC,aAAc,MAiBhBC,YAAa,WACXC,MAAM,gDACHC,KAAK,SAACC,GAAD,OAAaA,EAASC,SAC3BF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,EAAK,IACjBG,EAAKC,SAAS,CACZV,aAAcM,EAAK,2FApBR,IAAAK,EAAAC,KACjBA,KAAKF,SAAS,CACZX,WAAW,IAEbG,MAAM,gDACHC,KAAK,SAACC,GAAD,OAAaA,EAASC,SAC3BF,KAAK,SAAAG,GACJK,EAAKD,SAAS,CACZX,WAAW,EACXC,aAAcM,EAAK,wCAgBlB,IAAAO,EACkBD,KAAKd,MAAME,aAA/Bc,EADED,EACFC,MAAOC,EADLF,EACKE,UACZ,OACEC,EAAAC,EAAAC,cAAClC,EAAD,MAC4B,IAAzB4B,KAAKd,MAAMC,WACViB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAC3B,EAAD,KAAYuB,GACZE,EAAAC,EAAAC,cAACxB,EAAD,WAAUqB,EAAV,OACAC,EAAAC,EAAAC,cAAC9B,EAAD,CAAQgC,QAASR,KAAKX,aAAtB,6BAvCMoB,aCjDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.e2223fb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst AppContainer = styled.div`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n  text-align:center;\n  padding: 50px 80px;\n`;\n\nconst Button = styled.button`\n  color: tomato;\n  font-size: 20px;\n  margin: 1em auto;\n  padding: 0.25em 1em;\n  border: 2px solid tomato;\n  border-radius: 3px;\n  background: transparent;\n  transition: all 0.25s;\n  position: absolute;\n  bottom: 0;\n\n  :hover{\n    color: #000;\n    background: tomato;\n  }\n\n`;\n\nconst Paragraph = styled.p`\n  color: tomato;\n  font-style: italic;\n  font-size: 1em;\n  \n  &::before{\n    content: '❝';\n    font-size:2em;\n    position:relative;\n    margin-right:10px;\n  }\n\n  &::after{\n    content: '❞';\n    font-size:2em;\n    position:relative;\n    margin-left: 5px;\n  }\n`;\n\nconst Span = styled.span`\n  text-transform:uppercase;\n  font-size:15px;\n`;\n\nclass App extends Component {\n  state = {\n    isLoading: false,\n    randomQuotes: []\n  }\n\n  componentDidMount(){\n    this.setState({\n      isLoading: true\n    })\n    fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n      .then((response)=> response.json())\n      .then(data => {\n        this.setState({\n          isLoading: false,\n          randomQuotes: data[0],\n        })\n    })\n  }\n\n  handleClick =() => {\n    fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\n      .then((response)=> response.json())\n      .then(data => {\n        console.log(data[0]);\n        this.setState({\n          randomQuotes: data[0]\n        })\n    })\n  }\n\n  render() {\n   const{quote, character} = this.state.randomQuotes;\n    return (\n      <AppContainer>\n        {this.state.isLoading === false && \n          <React.Fragment>\n            <Paragraph>{quote}</Paragraph>\n            <Span> - {character} - </Span>\n            <Button onClick={this.handleClick}>Get A New Quote!</Button>\n          </React.Fragment>\n        }\n      </AppContainer>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto-slab';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}