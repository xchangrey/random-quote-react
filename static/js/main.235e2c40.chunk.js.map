{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","_templateObject","Button","button","_templateObject2","Paragraph","p","_templateObject3","Span","span","_templateObject4","App","state","isLoading","randomQuotes","handleClick","fetch","then","response","json","data","console","log","_this","setState","_this2","this","_this$state$randomQuo","quote","character","react_default","a","createElement","Fragment","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"y+CAIA,IAAMA,EAAeC,IAAOC,IAAVC,KAiBZC,EAASH,IAAOI,OAAVC,KAkBNC,EAAYN,IAAOO,EAAVC,KAoBTC,EAAOT,IAAOU,KAAVC,KAoDKC,6MA9CbC,MAAQ,CACNC,WAAW,EACXC,aAAc,MAiBhBC,YAAa,WACXC,MAAM,gDACHC,KAAK,SAACC,GAAD,OAAaA,EAASC,SAC3BF,KAAK,SAAAG,GACJC,QAAQC,IAAIF,EAAK,IACjBG,EAAKC,SAAS,CACZV,aAAcM,EAAK,2FApBR,IAAAK,EAAAC,KACjBA,KAAKF,SAAS,CACZX,WAAW,IAEbG,MAAM,gDACHC,KAAK,SAACC,GAAD,OAAaA,EAASC,SAC3BF,KAAK,SAAAG,GACJK,EAAKD,SAAS,CACZX,WAAW,EACXC,aAAcM,EAAK,wCAgBlB,IAAAO,EACkBD,KAAKd,MAAME,aAA/Bc,EADED,EACFC,MAAOC,EADLF,EACKE,UACZ,OACEC,EAAAC,EAAAC,cAAClC,EAAD,MAC4B,IAAzB4B,KAAKd,MAAMC,WACViB,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAC3B,EAAD,KAAYuB,GACZE,EAAAC,EAAAC,cAACxB,EAAD,WAAUqB,EAAV,OACAC,EAAAC,EAAAC,cAAC9B,EAAD,CAAQgC,QAASR,KAAKX,aAAtB,6BAvCMoB,aCpDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.235e2c40.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport './App.css';\r\n\r\nconst AppContainer = styled.div`\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n  text-align:center;\r\n  padding: 0px 80px;\r\n\r\n  @media(max-width:500px){\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  color: tomato;\r\n  font-size: calc(5px + 2vmin);\r\n  margin: 1em auto;\r\n  padding: 0.25em 1em;\r\n  border: 2px solid tomato;\r\n  border-radius: 3px;\r\n  background: transparent;\r\n  transition: all 0.25s;\r\n  position: absolute;\r\n  bottom: 0;\r\n\r\n  :hover {\r\n    color: #000;\r\n    background: tomato;\r\n  }\r\n`;\r\n\r\nconst Paragraph = styled.p`\r\n  color: tomato;\r\n  font-style: italic;\r\n  font-size: 1.1em;\r\n  \r\n  &::before{\r\n    content: '❝';\r\n    font-size:2em;\r\n    position:relative;\r\n    margin-right:10px;\r\n  }\r\n\r\n  &::after{\r\n    content: '❞';\r\n    font-size:2em;\r\n    position:relative;\r\n    margin-left: 5px;\r\n  }\r\n`;\r\n\r\nconst Span = styled.span`\r\n  text-transform: uppercase;\r\n  font-size: calc(5px + 2vmin);\r\n`;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    isLoading: false,\r\n    randomQuotes: []\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      isLoading: true\r\n    })\r\n    fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\r\n      .then((response)=> response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          isLoading: false,\r\n          randomQuotes: data[0],\r\n        })\r\n    })\r\n  }\r\n\r\n  handleClick =() => {\r\n    fetch('https://thesimpsonsquoteapi.glitch.me/quotes')\r\n      .then((response)=> response.json())\r\n      .then(data => {\r\n        console.log(data[0]);\r\n        this.setState({\r\n          randomQuotes: data[0]\r\n        })\r\n    })\r\n  }\r\n\r\n  render() {\r\n   const{quote, character} = this.state.randomQuotes;\r\n    return (\r\n      <AppContainer>\r\n        {this.state.isLoading === false && \r\n          <React.Fragment>\r\n            <Paragraph>{quote}</Paragraph>\r\n            <Span> - {character} - </Span>\r\n            <Button onClick={this.handleClick}>Get A New Quote!</Button>\r\n          </React.Fragment>\r\n        }\r\n      </AppContainer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'typeface-roboto-slab';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}